import datetime
import logging
from pprint import pprint
from typing import Union, Text
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, state
from aiogram.types import CallbackQuery, Message
from states.shift_states import States
from keyboards.inline.menu_keyboards import menu_cd, shifts_keyboard, categories_keyboard, questions_keyboard, \
    item_keyboard
from loader import dp
import uuid

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /menu
from utils.db_api.db_commands import add_result, add_shift, get_cur_shift, count_positive_results, get_single_question, \
    get_user_first_name, add_user, user_exist, get_negative_results, update_shift, count_positive_results_prev_shift
from utils.misc.misc_defs import bool_res


@dp.message_handler(Command("menu"), state='*')
async def show_menu(message: types.Message, state: FSMContext):
    # –í—ã–ø–æ–ª–Ω–∏–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–º–µ–Ω–∞–º–∏
    await list_shifts(message)
    await States.shift_start.set()
    await add_shift()
    shift_id = await get_cur_shift()
    async with state.proxy() as data:
        data['shift_id'] = shift_id


async def list_shifts(message: types.Message, **kwargs):
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–≥–¥–µ –¥–µ–ª–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
    markup = await shifts_keyboard()
    await message.answer("–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä—è–º–∏
async def list_categories(callback: CallbackQuery, state: FSMContext, callback_data: dict, **kwargs):
    markup = await categories_keyboard()
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    await callback.message.edit_text('–ß—Ç–æ –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å?', reply_markup=markup)
    # await callback.message.edit_reply_markup(markup)
    print(f' –°–ë –∫–∞—Ç–µ–≥–æ—Ä–∏–π{callback_data}')

    async with state.proxy() as data:
        if callback_data.get('user') != '0':  # –î–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –≤ —Å–º–µ–Ω—É
            user: int = int(callback_data.get('user'))
            shift_id: int = data.get('shift_id')
            await update_shift(shift_id, user)

        if callback_data['user'] != '0':
            data['user'] = callback_data['user']
        res = await bool_res(callback_data.get('res'))
        if data.get('question_id') and callback_data.get('question_id') != 'dummy':
            date = datetime.datetime.now()
            await add_result(
                shift_id=data.get('shift_id'),
                user_id=int(data.get('user')),
                date=date,
                category=str(data.get('category')),
                question_id=int(data.get('question_id')),
                result=res
            )


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def list_items(callback: CallbackQuery, category, state: FSMContext, callback_data: dict, **kwargs):
    async with state.proxy() as data:
        data['category'] = callback_data['category']
        markup = await questions_keyboard(category)
        # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –≤–Ω—É—Ç—Ä—è–Ω–∫–æ–π –≤–æ–ø—Ä–æ—Å–∞ (T/F)
        await callback.message.edit_text(text="–ê –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ?", reply_markup=markup)
    print(f' –°–ë –≤–æ–ø—Ä–æ—Å–æ–≤{callback_data}')


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ T/F
async def show_item(callback: CallbackQuery, category, item_id, state: FSMContext, callback_data: dict, **kwargs):
    markup = item_keyboard(category, item_id)
    question = await get_single_question(int(callback_data.get('question_id')))
    await callback.message.edit_text(question.text, reply_markup=markup)
    print(f' –°–ë –æ—Ç–≤–µ—Ç–æ–≤{callback_data}')
    async with state.proxy() as data:
        data['question_id'] = callback_data['question_id']


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –í–°–ï –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ —ç—Ç–æ–π –º–µ–Ω—é—à–∫–µ
@dp.callback_query_handler(menu_cd.filter(), state='*')
async def navigate(call: CallbackQuery, callback_data: dict):
    """
    :param call: –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ CallbackQuery, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –≤ —Ö–µ–Ω–¥–ª–µ—Ä
    :param callback_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
    """
    current_level = callback_data.get("level")
    category = callback_data.get("category")
    item_id = callback_data.get("item_id")
    cur_state = dp.get_current().current_state()

    # –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º "—É—Ä–æ–≤–Ω–∏" –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    levels = {
        "0": list_shifts,  # –û—Ç–¥–∞–µ–º —Å–º–µ–Ω—ã
        "1": list_categories,  # –û—Ç–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        "2": list_items,  # –û—Ç–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        "3": show_item,  # –û—Ç–¥–∞–µ–º –æ—Ç–≤–µ—Ç—ã
    }
    # –ó–∞–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
    current_level_function = levels[current_level]
    # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–µ—Ä–µ–¥–∞–µ–º —Ç—É–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ –∫–Ω–æ–ø–∫–∏
    await current_level_function(
        call,
        state=cur_state,
        callback_data=callback_data,
        category=category,
        item_id=item_id
    )


@dp.callback_query_handler(state="*", text='finish_shift')
async def finish_shift(call: CallbackQuery, state: FSMContext):
    cur_shift = await get_cur_shift()
    result = await count_positive_results(cur_shift)
    res_str = str(result)
    prev_score = await count_positive_results_prev_shift()
    async with state.proxy() as data:
        user_id = int(data['user'])
        user_name = await get_user_first_name(user_id)
        if res_str[-1] == '1':
            await call.message.answer(f"{user_name},c–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! –í—ã –Ω–∞–±—Ä–∞–ª–∏ üî•{result}üî• –±–∞–ª–ª –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é —Å–º–µ–Ω—É \n" \
            f"–ó–∞ –ø—Ä–æ—à–ª—É—é —Å–º–µ–Ω—É –≤—ã –Ω–∞–±—Ä–∞–ª–∏ üî•{prev_score}üî• –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

        elif result in range(2, 4):
            await call.message.answer(f"{user_name},c–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! –í—ã –Ω–∞–±—Ä–∞–ª–∏ üî•{result}üî• –±–∞–ª–ª–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é —Å–º–µ–Ω—É \n" \
            f"–ó–∞ –ø—Ä–æ—à–ª—É—é —Å–º–µ–Ω—É –≤—ã –Ω–∞–±—Ä–∞–ª–∏ üî•{prev_score}üî• –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

        else:
            await call.message.answer(f"{user_name},c–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! –í—ã –Ω–∞–±—Ä–∞–ª–∏ üî•{result}üî• –±–∞–ª–ª–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é —Å–º–µ–Ω—É \n" \
            f"–ó–∞ –ø—Ä–æ—à–ª—É—é —Å–º–µ–Ω—É –≤—ã –Ω–∞–±—Ä–∞–ª–∏ üî•{prev_score}üî• –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

    # await call.message.answer(f"–í —Å–ª–µ–¥—É—é—â—É—é —Å–º–µ–Ω—É –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –º–æ–º–µ–Ω—Ç—ã:{}")

    await state.reset_state()
    await call.message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu")


@dp.callback_query_handler(state="*", text='add_user')
async def finish_shift(call: CallbackQuery):
    await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å. –ò–º—è –∏ –§–∞–º–∏–ª–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ—á–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
    await States.add_user.set()


@dp.message_handler(state=States.add_user)
async def add_new_user(message: Message):
    name = message.text
    f_name, s_name = name.split(' ')
    if f_name.isdigit() or s_name.isdigit():
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ")
        return
    print(name)

    if not await user_exist(name):
        await add_user(name=name)
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω.–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu")
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ "
                             "–ø—Ä–∏–≥–ª—è–¥–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–ø–∏—Å–∫—É")
        return
